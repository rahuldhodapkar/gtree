# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/gtree"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
    # Set the name
    vb.name = "gtree"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update

    # install general dev dependencies
    apt-get install -y git vim python
    apt-get install -y unzip

    # install pIRS dependencies
    apt-get install -y libboost-all-dev zlib1g-dev build-essential
    apt-get install -y libwxgtk2.8-dev libpango1.0-dev libreadline5-dev libx11-dev libxt-dev texinfo libgd2-xpm-dev gnuplot gzip

    # install pIRS
    git clone https://github.com/galaxy001/pirs.git
    cd pirs; make;
    find . -type l | \
    while read a;
    do
        cp --copy-contents -LR  "$a" /usr/local/bin/;
    done;

    # install genomics toolkits
    apt-get install -y samtools

    # install BWA
    cd $HOME
    curl -OL http://downloads.sourceforge.net/project/bio-bwa/bwa-0.7.12.tar.bz2 
    tar -xvf bwa-0.7.12.tar.bz2
    cd bwa-0.7.12; make;
    cp ./bwa /usr/local/bin/

    # install bowtie
    cd $HOME
    curl -OL http://downloads.sourceforge.net/project/bowtie-bio/bowtie/1.1.2/bowtie-1.1.2-linux-x86_64.zip
    unzip bowtie-1.1.2-linux-x86_64.zip 
    cd bowtie-1.1.2; cp bowtie* /usr/local/bin/

    # install bowtie2
    cd $HOME
    curl -OL http://downloads.sourceforge.net/project/bowtie-bio/bowtie2/2.2.9/bowtie2-2.2.9-linux-x86_64.zip
    unzip bowtie2-2.2.9-linux-x86_64.zip 
    cd bowtie2-2.2.9; cp bowtie2* /usr/local/bin/

    # system should now be built and configured with the biggest
    # aligners installed to test and profile against!
    #
     
    
  SHELL
end
